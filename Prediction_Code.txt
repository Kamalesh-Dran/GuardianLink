# Here this code is for predicting the output from the received data (8 data) from arduino nano
# via serial communication and then again sending this data back to nano so that it can
# transmit the predicted output the remote and display it on OLED display


#Importing Libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
import joblib

# checking
print('Libraries Imported')
x_test = [[45641, 19227, 39632, 39788, 26630, -0.02, -85, 19],[29319, 18954, 30300, 38099, 42703, 10,-22, 36]]

#Creating data set
dataset = pd.read_csv('project.csv')
print('Shape of the dataset: ' + str(dataset.shape))
print(dataset.head())

#Splitting the data into independent and dependent variables
x = dataset.iloc[:,0:8].values
y = dataset.iloc[:,8].values
print('The independent features set: ')
print(x[:9,:])
print('The dependent variable: ')
print(y[:9])

# Feature Scaling
scaler = StandardScaler()
x = scaler.fit_transform(x)
x_test = scaler.transform(x_test)

# Fitting Random Forest Classification to the Training set
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 42)
classifier.fit(x, y)


y_pred = classifier.predict(x_test)
print(y_pred)

######################### Firebase Live Database #####################
import pyrebase
import time

firebaseConfig={
    "apiKey": "AIzaSyCZQWawrmQjLL2_Tc81sbXYT-RAtbhPkNM",
    "authDomain": "squad-fac43.firebaseapp.com",
    "projectId": "squad-fac43",
    "storageBucket": "squad-fac43.appspot.com",
    "messagingSenderId": "1021697178493",
    "appId": "1:1021697178493:web:7a5e4fa960db050a98aa14",
    "databaseURL" : "https://squad-fac43-default-rtdb.firebaseio.com/",
    "measurementId": "G-5KM65JGZZ7"
}

firebase = pyrebase.initialize_app(firebaseConfig)
db = firebase.database()
storage = firebase.storage()

def my_database(s):
   localtime = time.asctime(time.localtime(time.time()))
   data = {localtime[4:10]:s}
   db.child(localtime[20:24]).child(localtime[11:19]).set(data)

#########################         END           #####################

# Code to get serial data from controller
import serial.tools.list_ports
ports = serial.tools.list_ports.comports()
serialIns = serial.Serial()
portList = []

for onePort in ports:
    portList.append(str(onePort))
    print(str(onePort))

val = input("select Port: COM")

for x in range(0,len(portList)):
    if portList[x].startswith("COM"+str(val)):
        portVar = "COM" + str(val)
        print(portList[x])

serialIns.baudrate = 9600
serialIns.port = portVar
serialIns.open()
name = 'Z'

while True:
    if serialIns.in_waiting:
        packet = serialIns.readline()
        packet = packet.decode('utf'.rstrip('\n'))
        l = len(packet)
        if(l < 10):
            print(packet)
        else :
           arr = packet.split(",")
           arr = list(map(float,arr))
           arr = np.array(arr)
           x_test[1]=arr
           x_test = scaler.transform(x_test)
           print(x_test[1])
           y_pred = classifier.predict(x_test)
           print(y_pred)
           if (y_pred[1] == 10):
               conv = '+'
           else:
               conv = str(y_pred[1])
               conv = conv
           print(conv)
           serialIns.write(conv.encode())
           if(y_pred[1] == 1):
              print("Move Forward\n")
              if(name != 'F'):
                 my_database("Move Forward")
                 name = 'F'
           elif(y_pred[1] == 2):
              print("Move Backward\n")
              if(name != 'B'):
                 my_database("Move Backward")
                 name = 'B'
           elif (y_pred[1] == 3):
              print("30 Seconds\n")
              if(name != 'S'):
                 my_database("30 Second")
                 name = 'S'
           elif (y_pred[1] == 4):
              print("Retreat\n")
              if(name != 'R'):
                 my_database("Retreat")
                 name = 'R'
           elif (y_pred[1] == 5):
              print("STOP\n")
              if(name != 'P'):
                 my_database("STOP")
                 name = 'P'
           elif (y_pred[1] == 6):
              print("Triangle Formation\n")
              if(name != 'T'):
                 my_database("Triangle Formation")
                 name = 'T'
           elif (y_pred[1] == 7):
              print("Fire\n")
              if(name != 'I'):
                 my_database("Fire")
                 name = 'I'
           elif (y_pred[1] == 8):
              print("Get Ready\n")
              if(name != 'G'):
                 my_database("Get Ready")
                 name = 'G'
           elif (y_pred[1] == 9):
              print("Plan B\n")
              if(name != 'B'):
                 my_database("Plan B")
                 name = 'B'
           elif (y_pred[1] == 10):
              print("Wait for the message\n")
              if(name != 'W'):
                 my_database("Wait ")
                 name = 'W'